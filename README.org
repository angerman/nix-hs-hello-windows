* Using ~nix~ and ~nixpkgs~ to cross compile Haskell packages to Windows

  This repository contains the necessary nix-expressions and a ~nixpkgs~
  submodule that should allow us to cross compile a small haskell application
  into a working windows executable.

  [[file:hs-hello.png]]
** Example applications
   - ~hello-world~ is the sample application that can be seen in the screenshot above.  It contains no a trivial haskell application
     with almost no dependencies.
   - ~remote-iserv~ is the template haskell runner application.  This needs to be built, and copied together with the
     ~libwinpthread-1.dll~ from the ~windows.mingw_w64_pthreads~ package to the window machine to compile haskell packages using
     template haskell (non-filesystem and non-process only).
   - ~dhall-json~ is a slightly more sophisticated haskell application with a larger set of dependencies and through the dependency
     on ~trifecta~ also dependent on Template Haskell to compile.

** Building without Template Haskell
   To build the cross compiled applications with ~nix~, we need to invoke ~nix-build~. For example for ~hello-world~:

   #+BEGIN_SRC bash
   $ nix-build -A hello-world --cores 0 
   #+END_SRC

   This will build the necessary dependencies, and finally build the
   ~hs-hello.exe~, which we can find in ~result/bin/hs-hello.exe~.

** Building with Template Haskell
   To build a cross compiled application with ~nix~ that requires Template Haskell during the build, we need to build the 
   ~remote-iserv~ application first.  This acts as an evaluation slave for GHC to evaluate Template Haskell splices on the
   target machine.

   #+BEGIN_SRC bash
   $ nix-build -A remote-iserv --cores 0 --out-link remote-iserv
   $ nix-build -A pthreads --out-link mingw_pthreads
   #+END_SRC

   Copying ~remote-iserv/bin/remote-iserv.exe~ together with ~mingw_pthreads/bin/libwinpthread-1.dll~ to a windows machine
   and launching in a command prompt:

   #+BEGIN_SRC bash
   > remote-iserv.exe tmp 5001 -v
   #+END_SRC

   Now building ~dhall-json~ (or any other library with non-fs and non-proc TH requirements), after adjusting the ~PORT~
   value in the ~config.nix~.

   #+BEGIN_SRC bash
   $ nix-build -A dhall-json --cores 0
   #+END_SRC

   should put the ~dhall-json~ executable for windows into ~result/bin~.

** The ~nix~ expressions:
*** ~config.nix~

    The ~config.nix~ contains the necessary local modifications on top of the ~nixpkgs~
    required to build all tools.  We'll hopefully be able to reduce the amount of
    customization in the future.

*** ~default.nix~
    In the ~default.nix~ we'll pull everything together.  Set the ~crossSystem~
    to ~mingwW64~ and the ~packageOverlays~ via ~config~.

    The ~default.nix~ also exports a variety of tools from the ~haskell.packages~
    as well as from the ~buildPackages.haskell.packages~.

