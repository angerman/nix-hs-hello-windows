diff -ur transformers-0.5.5.0/Control/Applicative/Backwards.hs transformers-0.5.5.0.patched/Control/Applicative/Backwards.hs
--- transformers-0.5.5.0/Control/Applicative/Backwards.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Applicative/Backwards.hs	2018-03-12 18:07:27.000000000 +0800
@@ -32,6 +32,9 @@
 import Control.Applicative
 import Data.Foldable
 import Data.Traversable
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 -- | The same functor, but with an 'Applicative' instance that performs
 -- actions in the reverse order.
@@ -100,3 +103,9 @@
     {-# INLINE traverse #-}
     sequenceA (Backwards t) = fmap Backwards (sequenceA t)
     {-# INLINE sequenceA #-}
+
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant f => Contravariant (Backwards f) where
+  contramap f = Backwards . contramap f . forwards
+  {-# INLINE contramap #-}
+#endif
diff -ur transformers-0.5.5.0/Control/Monad/Trans/Error.hs transformers-0.5.5.0.patched/Control/Monad/Trans/Error.hs
--- transformers-0.5.5.0/Control/Monad/Trans/Error.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Monad/Trans/Error.hs	2018-03-12 17:52:36.000000000 +0800
@@ -73,6 +73,9 @@
 import Data.Monoid (mempty)
 import Data.Traversable (Traversable(traverse))
 import System.IO.Error
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 #if !(MIN_VERSION_base(4,9,0))
 -- These instances are in base-4.9.0
@@ -263,6 +266,11 @@
 instance (Error e, MonadIO m) => MonadIO (ErrorT e m) where
     liftIO = lift . liftIO
 
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant m => Contravariant (ErrorT e m) where
+  contramap f = ErrorT . contramap (fmap f) . runErrorT
+#endif
+
 -- | Signal an error value @e@.
 --
 -- * @'runErrorT' ('throwError' e) = 'return' ('Left' e)@
diff -ur transformers-0.5.5.0/Control/Monad/Trans/Except.hs transformers-0.5.5.0.patched/Control/Monad/Trans/Except.hs
--- transformers-0.5.5.0/Control/Monad/Trans/Except.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Monad/Trans/Except.hs	2018-03-12 17:54:03.000000000 +0800
@@ -65,7 +65,9 @@
 import Data.Foldable (Foldable(foldMap))
 import Data.Monoid
 import Data.Traversable (Traversable(traverse))
-
+#if MIN_VERSION_base(4,11,0)
+import Data.Functor.Contravariant
+#endif
 -- | The parameterizable exception monad.
 --
 -- Computations are either exceptions or normal values.
@@ -255,6 +257,11 @@
     {-# INLINE mzipWith #-}
 #endif
 
+#if MIN_VERSION_base(4,11,0)
+instance Contravariant m => Contravariant (ExceptT e m) where
+  contramap f = ExceptT . contramap (fmap f) . runExceptT
+#endif
+
 -- | Signal an exception value @e@.
 --
 -- * @'runExceptT' ('throwE' e) = 'return' ('Left' e)@
diff -ur transformers-0.5.5.0/Control/Monad/Trans/Identity.hs transformers-0.5.5.0.patched/Control/Monad/Trans/Identity.hs
--- transformers-0.5.5.0/Control/Monad/Trans/Identity.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Monad/Trans/Identity.hs	2018-03-12 17:55:11.000000000 +0800
@@ -49,6 +49,9 @@
 import Data.Foldable
 import Data.Traversable (Traversable(traverse))
 import Prelude hiding (foldr, foldr1, foldl, foldl1, null, length)
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 -- | The trivial monad transformer, which maps a monad to an equivalent monad.
 newtype IdentityT f a = IdentityT { runIdentityT :: f a }
@@ -154,6 +157,11 @@
     lift = IdentityT
     {-# INLINE lift #-}
 
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant f => Contravariant (IdentityT f) where
+  contramap f = IdentityT . contramap f . runIdentityT
+#endif
+
 -- | Lift a unary operation to the new monad.
 mapIdentityT :: (m a -> n b) -> IdentityT m a -> IdentityT n b
 mapIdentityT f = IdentityT . f . runIdentityT
diff -ur transformers-0.5.5.0/Control/Monad/Trans/List.hs transformers-0.5.5.0.patched/Control/Monad/Trans/List.hs
--- transformers-0.5.5.0/Control/Monad/Trans/List.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Monad/Trans/List.hs	2018-03-12 17:55:53.000000000 +0800
@@ -45,6 +45,9 @@
 #endif
 import Data.Foldable (Foldable(foldMap))
 import Data.Traversable (Traversable(traverse))
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 -- | Parameterizable list monad, with an inner monad.
 --
@@ -153,6 +156,11 @@
     {-# INLINE mzipWith #-}
 #endif
 
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant m => Contravariant (ListT m) where
+  contramap f = ListT . contramap (fmap f) . runListT
+#endif
+
 -- | Lift a @callCC@ operation to the new monad.
 liftCallCC :: CallCC m [a] [b] -> CallCC (ListT m) a b
 liftCallCC callCC f = ListT $
diff -ur transformers-0.5.5.0/Control/Monad/Trans/Maybe.hs transformers-0.5.5.0.patched/Control/Monad/Trans/Maybe.hs
--- transformers-0.5.5.0/Control/Monad/Trans/Maybe.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Monad/Trans/Maybe.hs	2018-03-12 17:56:34.000000000 +0800
@@ -58,6 +58,9 @@
 import Data.Foldable (Foldable(foldMap))
 import Data.Maybe (fromMaybe)
 import Data.Traversable (Traversable(traverse))
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 -- | The parameterizable maybe monad, obtained by composing an arbitrary
 -- monad with the 'Maybe' monad.
@@ -201,6 +204,10 @@
     mzipWith f (MaybeT a) (MaybeT b) = MaybeT $ mzipWith (liftA2 f) a b
     {-# INLINE mzipWith #-}
 #endif
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant m => Contravariant (MaybeT m) where
+  contramap f = MaybeT . contramap (fmap f) . runMaybeT
+#endif
 
 -- | Lift a @callCC@ operation to the new monad.
 liftCallCC :: CallCC m (Maybe a) (Maybe b) -> CallCC (MaybeT m) a b
diff -ur transformers-0.5.5.0/Control/Monad/Trans/RWS/Lazy.hs transformers-0.5.5.0.patched/Control/Monad/Trans/RWS/Lazy.hs
--- transformers-0.5.5.0/Control/Monad/Trans/RWS/Lazy.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Monad/Trans/RWS/Lazy.hs	2018-03-12 17:59:00.000000000 +0800
@@ -72,6 +72,9 @@
 #endif
 import Control.Monad.Fix
 import Data.Monoid
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 -- | A monad containing an environment of type @r@, output of type @w@
 -- and an updatable state of type @s@.
@@ -231,6 +234,12 @@
     liftIO = lift . liftIO
     {-# INLINE liftIO #-}
 
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant m => Contravariant (RWST r w s m) where
+  contramap f m = RWST $ \r s ->
+    contramap (\ ~(a, s', w) -> (f a, s', w)) $ runRWST m r s
+#endif
+
 -- ---------------------------------------------------------------------------
 -- Reader operations
 
diff -ur transformers-0.5.5.0/Control/Monad/Trans/RWS/Strict.hs transformers-0.5.5.0.patched/Control/Monad/Trans/RWS/Strict.hs
--- transformers-0.5.5.0/Control/Monad/Trans/RWS/Strict.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Monad/Trans/RWS/Strict.hs	2018-03-12 17:59:48.000000000 +0800
@@ -72,6 +72,9 @@
 #endif
 import Control.Monad.Fix
 import Data.Monoid
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 -- | A monad containing an environment of type @r@, output of type @w@
 -- and an updatable state of type @s@.
@@ -231,6 +234,12 @@
     liftIO = lift . liftIO
     {-# INLINE liftIO #-}
 
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant m => Contravariant (RWST r w s m) where
+  contramap f m = RWST $ \r s ->
+    contramap (\ (a, s', w) -> (f a, s', w)) $ runRWST m r s
+#endif
+
 -- ---------------------------------------------------------------------------
 -- Reader operations
 
diff -ur transformers-0.5.5.0/Control/Monad/Trans/Reader.hs transformers-0.5.5.0.patched/Control/Monad/Trans/Reader.hs
--- transformers-0.5.5.0/Control/Monad/Trans/Reader.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Monad/Trans/Reader.hs	2018-03-12 18:06:28.000000000 +0800
@@ -66,6 +66,9 @@
 #if MIN_VERSION_base(4,2,0)
 import Data.Functor(Functor(..))
 #endif
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 -- | The parameterizable reader monad.
 --
@@ -207,6 +210,11 @@
     {-# INLINE mzipWith #-}
 #endif
 
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant m => Contravariant (ReaderT r m) where
+  contramap f = ReaderT . fmap (contramap f) . runReaderT
+#endif
+
 liftReaderT :: m a -> ReaderT r m a
 liftReaderT m = ReaderT (const m)
 {-# INLINE liftReaderT #-}
diff -ur transformers-0.5.5.0/Control/Monad/Trans/State/Lazy.hs transformers-0.5.5.0.patched/Control/Monad/Trans/State/Lazy.hs
--- transformers-0.5.5.0/Control/Monad/Trans/State/Lazy.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Monad/Trans/State/Lazy.hs	2018-03-12 18:02:20.000000000 +0800
@@ -84,6 +84,9 @@
 import qualified Control.Monad.Fail as Fail
 #endif
 import Control.Monad.Fix
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 -- ---------------------------------------------------------------------------
 -- | A state monad parameterized by the type @s@ of the state to carry.
@@ -253,6 +256,12 @@
     liftIO = lift . liftIO
     {-# INLINE liftIO #-}
 
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant m => Contravariant (StateT s m) where
+  contramap f m = StateT $ \s ->
+    contramap (\ ~(a, s') -> (f a, s')) $ runStateT m s
+#endif
+
 -- | Fetch the current value of the state within the monad.
 get :: (Monad m) => StateT s m s
 get = state $ \ s -> (s, s)
diff -ur transformers-0.5.5.0/Control/Monad/Trans/State/Strict.hs transformers-0.5.5.0.patched/Control/Monad/Trans/State/Strict.hs
--- transformers-0.5.5.0/Control/Monad/Trans/State/Strict.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Monad/Trans/State/Strict.hs	2018-03-12 18:03:02.000000000 +0800
@@ -81,6 +81,9 @@
 import qualified Control.Monad.Fail as Fail
 #endif
 import Control.Monad.Fix
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 -- ---------------------------------------------------------------------------
 -- | A state monad parameterized by the type @s@ of the state to carry.
@@ -250,6 +253,12 @@
     liftIO = lift . liftIO
     {-# INLINE liftIO #-}
 
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant m => Contravariant (StateT s m) where
+  contramap f m = StateT $ \s ->
+    contramap (\ (a, s') -> (f a, s')) $ runStateT m s
+#endif
+
 -- | Fetch the current value of the state within the monad.
 get :: (Monad m) => StateT s m s
 get = state $ \ s -> (s, s)
diff -ur transformers-0.5.5.0/Control/Monad/Trans/Writer/Lazy.hs transformers-0.5.5.0.patched/Control/Monad/Trans/Writer/Lazy.hs
--- transformers-0.5.5.0/Control/Monad/Trans/Writer/Lazy.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Monad/Trans/Writer/Lazy.hs	2018-03-12 18:03:53.000000000 +0800
@@ -68,6 +68,9 @@
 import Data.Monoid
 import Data.Traversable (Traversable(traverse))
 import Prelude hiding (null, length)
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 -- ---------------------------------------------------------------------------
 -- | A writer monad parameterized by the type @w@ of output to accumulate.
@@ -144,6 +147,11 @@
 instance (Show w, Show1 m, Show a) => Show (WriterT w m a) where
     showsPrec = showsPrec1
 
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant m => Contravariant (WriterT w m) where
+  contramap f = mapWriterT $ contramap $ \ ~(a, w) -> (f a, w)
+#endif
+
 -- | Extract the output from a writer computation.
 --
 -- * @'execWriterT' m = 'liftM' 'snd' ('runWriterT' m)@
diff -ur transformers-0.5.5.0/Control/Monad/Trans/Writer/Strict.hs transformers-0.5.5.0.patched/Control/Monad/Trans/Writer/Strict.hs
--- transformers-0.5.5.0/Control/Monad/Trans/Writer/Strict.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Control/Monad/Trans/Writer/Strict.hs	2018-03-12 18:05:30.000000000 +0800
@@ -71,6 +71,9 @@
 import Data.Monoid
 import Data.Traversable (Traversable(traverse))
 import Prelude hiding (null, length)
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 -- ---------------------------------------------------------------------------
 -- | A writer monad parameterized by the type @w@ of output to accumulate.
@@ -146,6 +149,10 @@
     readsPrec = readsPrec1
 instance (Show w, Show1 m, Show a) => Show (WriterT w m a) where
     showsPrec = showsPrec1
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant m => Contravariant (WriterT w m) where
+  contramap f = mapWriterT $ contramap $ \ (a, w) -> (f a, w)
+#endif
 
 -- | Extract the output from a writer computation.
 --
diff -ur transformers-0.5.5.0/Data/Functor/Constant.hs transformers-0.5.5.0.patched/Data/Functor/Constant.hs
--- transformers-0.5.5.0/Data/Functor/Constant.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Data/Functor/Constant.hs	2018-03-12 17:50:51.000000000 +0800
@@ -42,6 +42,9 @@
 import Data.Bitraversable (Bitraversable(..))
 #endif
 import Prelude hiding (null, length)
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 
 -- | Constant functor.
 newtype Constant a b = Constant { getConstant :: a }
@@ -141,3 +144,8 @@
     bitraverse f _ (Constant a) = Constant <$> f a
     {-# INLINE bitraverse #-}
 #endif
+
+#if MIN_VERSION_base(4,11,0)
+instance Contravariant (Constant a) where
+  contramap _ (Constant a) = Constant a
+#endif
diff -ur transformers-0.5.5.0/Data/Functor/Reverse.hs transformers-0.5.5.0.patched/Data/Functor/Reverse.hs
--- transformers-0.5.5.0/Data/Functor/Reverse.hs	2017-10-04 23:58:48.000000000 +0800
+++ transformers-0.5.5.0.patched/Data/Functor/Reverse.hs	2018-03-12 17:48:29.000000000 +0800
@@ -38,7 +38,9 @@
 import Data.Foldable
 import Data.Traversable
 import Data.Monoid
-
+#if MIN_VERSION_base(4,11, 0)
+import Data.Functor.Contravariant
+#endif
 -- | The same functor, but with 'Foldable' and 'Traversable' instances
 -- that process the elements in the reverse order.
 newtype Reverse f a = Reverse { getReverse :: f a }
@@ -129,3 +131,9 @@
     traverse f (Reverse t) =
         fmap Reverse . forwards $ traverse (Backwards . f) t
     {-# INLINE traverse #-}
+
+#if MIN_VERSION_base(4,11, 0)
+instance Contravariant f => Contravariant (Reverse f) where
+  contramap f = Reverse . contramap f . getReverse
+  {-# INLINE contramap #-}
+#endif
